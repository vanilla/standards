<?xml version="1.0"?>
<ruleset name="Vanilla">
    <description>Vanilla coding standard</description>

    <exclude-pattern>*/views/*</exclude-pattern>
    <exclude-pattern>*/design/*</exclude-pattern>
    <exclude-pattern>*/cache/*</exclude-pattern>
    <exclude-pattern>*/vendors/*</exclude-pattern>
    <exclude-pattern>*/uploads/*</exclude-pattern>

    <rule ref="PSR1" >
        <exclude name="PSR1.Classes.ClassDeclaration.MissingNamespace" />
        <exclude name="Squiz.Classes.ValidClassName.NotCamelCaps"/>
        <exclude name="PSR1.Methods.CamelCapsMethodName.NotCamelCaps" />
    </rule>
    <rule ref="PSR2" >
        <exclude name="Squiz.Functions.MultiLineFunctionDeclaration.BraceOnSameLine" />
        <exclude name="PSR2.Classes.ClassDeclaration.OpenBraceNewLine" />
        <exclude name="PSR2.Classes.PropertyDeclaration" />
    </rule>

    <config name="installed_paths" value="../../vendor/slevomat/coding-standard"/>
    <config name="installed_paths" value="../../vanilla/standards/vendor/slevomat/coding-standard"/>

    <!-- Trailing array commas -->
    <rule ref="SlevomatCodingStandard.Arrays.TrailingArrayComma"/>

    <!-- Docblock validation -->
    <!--
        - Checks for missing property types in phpDoc @var.
        - Checks for missing typehints in case they can be declared natively. If the phpDoc contains something that can   be written as a native PHP 7.0, 7.1 or 7.2 typehint, this sniff reports that.
        - Checks for missing @return and/or native return typehint in case the method body contains return with a value.
        - Checks for useless doc comments. If the native method declaration contains everything and the phpDoc does not   add anything useful, it's reported as useless and can optionally be automatically removed with phpcbf.
        - Some phpDocs might still be useful even if they do not add any typehint information. They can contain textual   descriptions of code elements and also some meaningful annotations like @expectException or @dataProvider.
        - Forces to specify what's in traversable types like array, iterable and \Traversable.
    -->
    <rule ref="SlevomatCodingStandard.TypeHints.TypeHintDeclaration" />
    <rule ref="SlevomatCodingStandard.Commenting.ForbiddenAnnotations" />
    <rule ref="SlevomatCodingStandard.Commenting.ForbiddenComments" />
    <rule ref="SlevomatCodingStandard.Commenting.EmptyComment" />
    <rule ref="SlevomatCodingStandard.Commenting.InlineDocCommentDeclaration" />
    <rule ref="SlevomatCodingStandard.Commenting.DocCommentSpacing" />

    <!-- Ensure there's no use of deprecated functions -->
    <rule ref="Generic.PHP.DeprecatedFunctions"/>

    <!-- Ensure file starts with <?php -->
    <rule ref="Generic.PHP.CharacterBeforePHPOpeningTag"/>

    <!-- Reject <? opening tags -->
    <rule ref="Generic.PHP.DisallowShortOpenTag"/>

    <!-- Check that $this isn't used in static methods -->
    <rule ref="Squiz.Scope.StaticThisUsage"/>

    <!-- Include generic commenting sniffs -->
    <rule ref="Generic.Commenting.Fixme"/>
    <rule ref="Generic.Commenting.Todo"/>

    <!-- Same-line open braces for functions -->
    <rule ref="Generic.Functions.OpeningFunctionBraceKernighanRitchie"/>
    <rule ref="Vanilla.NamingConventions.ValidClassBrackets"/>

    <!-- Check that file level DocBlock exists and is valid -->
    <rule ref="Vanilla.Commenting.FileComment">
        <exclude name="Vanilla.Commenting.FileComment.DuplicateCopyrightTag" />
    </rule>
    <rule ref="Vanilla.Commenting.ClassComment"/>

    <!-- StegosaurusCase class names, underscores allowed -->
    <rul ref="Vanilla.Classes.ValidClassName" />

    <!-- camelCase Properties; no underscore -->
    <rule ref="Vanilla.Classes.PropertyDeclaration"/>

    <!-- camelCase or Vanilla Events -->
    <rule ref="Vanilla.Methods.CamelCapsMethodName"/>

    <!-- Increase lineLimit to 120 characters -->
    <rule ref="Generic.Files.LineLength">
        <properties>
        <property name="lineLimit" value="120"/>
        <property name="absoluteLineLimit" value="180"/>
     </properties>

 </rule>

</ruleset>
